{"version":3,"sources":["components/Panel.js","panels/Intro.js","panels/Modes101.js","panels/Modes102.js","panels/Info.js","components/ModeOverview.js","constants/chords.js","panels/Ionian.js","panels/Dorian.js","panels/Phrygian.js","panels/Lydian.js","panels/Mixolydian.js","panels/Aeolian.js","panels/Locrian.js","App.js","serviceWorker.js","index.js"],"names":["Panel","props","useState","showContent","setShowContent","sectionStyle","border","className","style","onClick","role","aria-label","color","content","title","href","target","rel","Intro","Modes101","Modes102","Info","renderTableRow","row","i","key","note","chords","modeName","map","whatIsIt","soundsLike","article","spotIt","soloOverIt","hearIt","ionianArray","dorianArray","slice","concat","phrygianArray","lydianArray","mixolydianArray","aeolianArray","locrianArray","ionianChords","dorianChords","phrygianChords","lydianChords","mixolydianChords","aeolianChords","locrianChords","ModeOverview","Ionian","Dorian","Phrygian","Lydian","Mixolydian","Aeolian","Locrian","App","keys","setKey","handleKeyChange","e","value","onChange","defaultValue","selectedKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.28a463d2.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Panel = props => {\n  const [showContent, setShowContent] = useState(false)\n  const collapseSymbol = '-'\n  const expandSymbol = '+'\n  const borderColor = showContent ? '#c0ff33' : '#b000b5'\n  const sectionStyle = {\n    border: `1px solid ${borderColor}`,\n  }\n  const symbolStyle = {\n    color: '#bada55',\n    'fontWeight': '800'\n  }\n  return (\n    <div\n      className='section'\n      style={sectionStyle}\n    >\n      <span\n        className='expand-collapse'\n        onClick={() => setShowContent(!showContent)}\n        role='img'\n        aria-label='expand or collapse'\n        style={symbolStyle}\n      >\n        {showContent ? collapseSymbol : expandSymbol}\n      </span>\n      <div>\n        {showContent\n          ? props.content()\n          : props.title()\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Panel\n","import React from 'react'\nimport Panel from '../components/Panel'\n\nconst Intro = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <p>\n    Modes can be a confusing aspect of music theory, particularly when approaching them as a guitarist who has been used to simply learning scales. Ok, one scale, the trusty minor pentatonic. Maybe the blues scale. Natural minor if you want to get fancy.\n    Then one day you hear somebody talking about 'modes'. <i>Modes</i> you think. Sounds interesting. So you search <a\n          className=\"App-link\"\n          href=\"https://ecosia.org/search?q=modes\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          ecosia\n        </a> and three days later you're crying and aren't even sure what a guitar is any more.\n    Why? Because there's just so much information, claims and counter claims, fake news and scholarly arguments about what modes are and what they aren't. So I thought what the hell, one more explanation can't hurt, and here you are.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>What is this page?</div>\n\nexport default Intro\n","import React from 'react'\nimport Panel from '../components/Panel'\n\nconst Modes101 = () => <Panel content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div className='modes-101'>\n    <p>\n      So what are modes? Well, Wikipedia defines a mode as <i className='quote'>a type of musical scale coupled with a set of characteristic melodic behaviors.</i>\n      That sounds easy enough, but it's the <i>second</i> part of that definition that often gets overlooked. I'll explain why this is important, but first, we'll look at the modes as scales.\n      A scale is just a series of notes defined by the interval (either a tone or a semitone) between each step.\n      The modes of the major scale are simply, when taken in isolation, the seven notes of the major scale starting from each degree (i.e. note) of the scale.\n      If we start with a C major scale, this means that every mode will have the same notes (C, D, E, F, G, A, B), but the interval breakdown of the scale will be different.\n      So the first degree mode of C will be C-D-E-F-G-A-B, the second degree mode will be D-E-F-G-A-B-C and so on.\n      Notice that the notes are the same, but the spacing of the intervals between them is different.\n      This is because the intervals between C-D-E-F-G-A-B are tone-tone-semitone-tone-tone-tone-semitone, but between D-E-F-G-A-B-C the intervals are tone-semitone-tone-tone-tone-semitone-tone.\n    </p>\n    <p>\n      Hopefully you can see now how the notes of the modes of a given key don't change.\n      If a progression is in the key of C, there are seven modal scales available to you, all featuring the same seven notes.\n    </p>\n    <p>\n      This is a very easy place to get confused!\n      You'd be forgiven for wondering how playing all the same notes but starting from a different point is any different to playing 'non-modally'.\n      But that's kind of the point - it's not. Knowing the modal scales is just the starting point for playing modally.\n      What's more important is knowing which notes in the scale provide the 'colour', and knowing when to use them.\n    </p>\n    <p>\n      If you want more theory around how to analyse modes in general, check out Modes 102 below.\n      If you want to start looking into the individual modes themselves, pick a key below and let's have a look at the different modes in all their glory and how we can use them.\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Modes 101</div>\n\nexport default Modes101\n","import React from 'react'\nimport Panel from '../components/Panel'\n\nconst Modes102 = () => <Panel content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div className='modes-102'>\n    <p>\n      Or is it modes 201..? Either way, once you're familiar with the basic concept of modes,\n      you can start to think about how to use them effectively. It's worth pointing out at this\n      stage that you'll often spot modal progressions within songs, but they may not apply to the\n      whole song. After all, keys change, you might want to throw dominant III chords in, accidentals occur.\n      So when looking for modal sections, try to look at short sections where you may spot modal themes.\n    </p>\n    <p>\n      The next thing, and probably the single most important thing when thinking modally,\n      is that <em>context is everything</em>. We know that, given a key signature, all of the\n      modes of that major scale will consist of the same notes. That means you could play any\n      of the modal scales over any of the chords in the song, and it would be musically correct.\n      Would it be modal though?\n    </p>\n    <p>\n      Let's consider a V-IV-I progression in C. Let's say the chords are simply G-F-C.\n      If you skip ahead to the Mixolydian panel below, you'll see that V-IV-I works well\n      as a base for a Mixolydian scale. So you play a G Mixolydian pattern over that progression\n      and you think, well, this is just a C major scale really, isn't it? Well, hopefully this\n      is where the penny will start to drop. It's not enough to simply play the major scale but\n      start on a different note, you have to think about the modal context.\n    </p>\n    <p>\n      But what does it all <em>mean</em>, Basil? Well, there are certain notes in each modal scale\n      that give them all a unique sound and feel (and possibly taste). In the Mixolydian mode, the\n      really important notes are the major third and the minor seventh. The third is always important\n      as it determines if your scale is major or minor. In the Mixolydian, the minor seventh is what\n      distinguishes the scale from the major scale, and gives it that cool bluesy feel.\n    </p>\n    <p>\n      Ok, cool, so we're going to emphasise the third and seventh of our G Mixolydian scale - that's\n      a B and an F. But there are things we can do with the progression to really anchor down that\n      G Mixolydian feel. We could keep our V-IV-I, but make sure we use those notes in all of our chords,\n      which will mean we can really play on that B and F in our licks. So we could make our G a G7\n      (G-B-D-F), our F a F/G (G-F-A-C) and our C a Csus4 (C-F-G) or Cmaj7 (C-E-G-B) or just a C/G (G-C-E-G).\n      Don't force it though - notice I didn't add a B to our F chord - we don't want the Lydian mode creeping\n      into our Mixolydian party, and that's what that #4 (B being a #4 of F) would want to do.\n    </p>\n    <p>\n      We'll look at more specific examples of this below - for now, pick a key and let's dive into the modes.\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Modes 102</div>\n\nexport default Modes102\n","import React from 'react'\nimport Panel from '../components/Panel'\n\nconst Info = () => <Panel content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div>\n    <p>\n      Ok, let's dive into the modes of the major scale, one by one.\n      You're going to pick a key (for simplicity I've just got the sharp keys for now), then by clicking or tapping on any of the panels below, you'll get a list of the notes in the scale and the chords you can build from each note.\n      Hopefully it'll come as no surprised to you that, once you've picked a key, the notes of all the modes will be the same, just from a different starting point.\n      The chords most associated with the mode will be highlighted.\n    </p>\n    <p>\n      Note that I've used the American notation style of a capital 'M' denoting major, so for example major 7 is written M7.\n      For full disclosure, this is my own interpretation of my understanding of modal music.\n      All examples, ramblings and mistakes are my own - read at your own peril.\n    </p>\n    <p>\n      So, pick a key, any key. No, not that one, an easy one please:\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Introduction</div>\n\nexport default Info\n","import React from 'react'\n\nconst renderTable = chords => (\n  <table className='mode-table'>\n    <tbody>\n      <tr className='tr-header'>\n        <td>Scale</td>\n        <td>Chords</td>\n      </tr>\n      {chords.map((row, i) => renderTableRow(row, i))}\n    </tbody>\n  </table>\n)\n\nconst renderTableRow = (row, i) => (\n  <tr key={`tr-${i}`} className='tr-data'>\n    <td key={row.note}>{row.note}</td>\n    <td key={`${row.note}-${i}`}>{row.chords}</td>\n  </tr>\n)\n\nexport default props => (\n  <div className={`mode-overview mode-overview-${props.modeName}`}>\n    <h3>The {props.modeName} Mode</h3>\n    {renderTable(props.chords)}\n    <div className='mode-detail'>\n      <h3 className='mode-detail-subheader'>\n        What is it?\n      </h3>\n      {props.whatIsIt()}\n      <h3 className='mode-detail-subheader'>\n        What does it sound like?\n      </h3>\n      {props.soundsLike()}\n      <h3 className='mode-detail-subheader'>\n        How do I spot/write {props.article} {props.modeName} progression?\n      </h3>\n      {props.spotIt()}\n      <h3 className='mode-detail-subheader'>\n        How do I solo over it?\n      </h3>\n      {props.soloOverIt()}\n      <h3 className='mode-detail-subheader'>\n        Where can I hear it?\n      </h3>\n      {props.hearIt()}\n    </div>\n  </div>\n)\n","const majorChords = 'maj, M7, M9, 6'\nconst minorChords = 'm, m7, m9'\nconst dominantChords = 'maj, 7, 9, 13'\nconst fourthChords = 'maj, maj9, maj7#11'\nconst halfDimChords = 'm7♭5'\nconst ionianArray = [{note:'C',chords:majorChords},{note:'D',chords:minorChords},{note:'E',chords:minorChords},{note:'F',chords:fourthChords},{note:'G',chords:dominantChords},{note:'A',chords:minorChords},{note:'B',chords:halfDimChords}]\nconst dorianArray = ionianArray.slice(1,7,0).concat(ionianArray[0])\nconst phrygianArray = dorianArray.slice(1,7,0).concat(dorianArray[0])\nconst lydianArray = phrygianArray.slice(1,7,0).concat(phrygianArray[0])\nconst mixolydianArray = lydianArray.slice(1,7,0).concat(lydianArray[0])\nconst aeolianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nconst locrianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nexport const ionianChords = ionianArray\nexport const dorianChords = dorianArray\nexport const phrygianChords = phrygianArray\nexport const lydianChords = lydianArray\nexport const mixolydianChords = mixolydianArray\nexport const aeolianChords = aeolianArray\nexport const locrianChords = locrianArray\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { ionianChords } from '../constants/chords'\n\nconst Ionian = props => <Panel content={() => content(props)} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Ionian'}\n      chords={ionianChords}\n      article={'an'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Ionian mode is the first degree mode of the major scale. In other words, its scale is the major scale starting from the first note of the major scale.</li>\n    <li>In (other) other words, its scale is just the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Ionian mode is happy, as you'd expect from a mode with all perfect and major intervals.\n    Don't expect too much drama from this mode - lots of nice, soft major sevenths on both the I and the IV are the order of the day.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    Keep it simple, stupid. I-IV-V-I will work nicely with a major 7 chord on the I.\n    To really pin down the Ionian flavour, use a second inversion on the IV chord (this uses the I note of the scale in the root of your IV chord) and a sus4 on your V chord (which again uses that I note).\n    If you want to get really wild, make the V dominant, but don't come crying to me if you just end up smashing wild Mixolydian phrases over it.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Softly softly catchy monkey. If you're playing over an Ionian progression, you're probably not going to be smashing out whammy bar dives with the gain up to 11.\n    But hey, don't let me stop you. To really get the feel of the Ionian mode though, you want to really play on the half-step between the major 7 and the I (or octave).\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    You'll hear Ionian music in lots of places - think nursery rhymes, Christmas carols, sentimental music, live lounge acoustic music.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Ionian</div>\n\nexport default Ionian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { dorianChords } from '../constants/chords'\n\nconst Dorian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Dorian'}\n      chords={dorianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Dorian mode is the second degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the second note of the major scale.</li>\n    <li>Its intervals are T-S-T-T-T-S-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Dorian mode to me has a Latin vibe with a little bit of jazz.\n    Latin probably because I associate this mode heavily with Carlos Santana, and jazz because it's the ii-V-I mode,\n    and every jazz piece is legally obliged to have at least 17 ii-V-I turnarounds.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    This is the ii-V-I mode. When you see ii-V-I, hit that Dorian button. Hard.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    The major 6 in this scale is what separates it from a natural minor and in my opinion you can't really overplay that note.\n    I like to slide up into it from a minor 6. Don't neglect the minor 3 either as it provides a nice contrast with the major 6.\n    If you can, pay attention to the notes in the chords. I know that's easier said than done though so hopefully the above advice helps you just utilise the scale.\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    Any and all jazz standards, or if jazz isn't your bag, just listen to the riff of Oye Como Va by Santana.\n    And if Santana isn't your bag, I really don't think we can be friends any more.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Dorian</div>\n\nexport default Dorian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { phrygianChords } from '../constants/chords'\n\nconst Phrygian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Phrygian'}\n      chords={phrygianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Phrygian mode is the third degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the third note of the major scale.</li>\n    <li>Its intervals are S-T-T-T-S-T-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The \"Spanish Gypsy mode\" has a lot of minor flavour to it but maintains perfect IV and V intervals.\n    This gives it a pretty cool and very distinctive sound that you can spot from a mile away.\n    It screams \"Flamenco\".\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    I think the Phrygian mode is one of the trickiest to write progressions for.\n    Really you're looking for a iii-IV-V - although the iii will often be a dominant chord.\n    The key is that half-step between the iii and the IV chord, which gives you that minor second interval in your Phrygian scale.\n    When the perfect IV is followed by the perfect V, you know you're dealing with a Phrygian progression.\n    Often you'll hear a song with a Phrygian feel but what should, in a pure Phrygian mode, be a iii (minor)\n    is actually a III (major or dominant) - for example White Rabbit by Jefferson Airplane.\n    Sometimes it can be easier for this mode to use riffs and basslines rather than chords.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Again, I think this is tricky. While the Phrygian scale is beautiful, I rarely find myself with the chance to utilise it.\n    If you do come across that elusive iii-IV-V, just stretch your legs and have a nice run up and down the scale,\n    smashing a few hammer-ons between the 5th and minor 6 note and the root and minor second, those little semitones are what make the mode.\n  </p>\n)\n\nconst hearIt = () => (\n  <ul>\n    <li>Summer Again - Big Mile (disclaimer - my old band, find on Soundcloud, link to follow)</li>\n  </ul>\n)\n\nconst title = () => <div className='subtitle'>Phrygian</div>\n\nexport default Phrygian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { lydianChords } from '../constants/chords'\n\nconst Lydian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Lydian'}\n      chords={lydianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Lydian mode is the fourth degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the fourth note of the major scale.</li>\n    <li>Its intervals are T-T-T-S-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    Ah yes, the mode every guitarist wants to master. The Lydian mode is a proper dreamboat of a mode.\n    By which I mean it has a 'dreamlike' quality, an ethereal, almost otherwordly quality that induces transports of delight and-\n    oops, sorry, got carried away a bit there. Easy done with this belter of a mode.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    There are progressions to look out for that will enable you to use the Lydian mode,\n    but to really get the most out of it you're looking for the IV chord in your progression to have\n    a #11 (which is enharmonic with the #4 in the scale.) Ideally you're looking for the IV chord to be followed by a V,\n    but resist the urge to then resolve that V back to the I. You <i>want</i> that slightly uneasy,\n    unresolved feeling. The best way to get into the Lydian mode is to try it over a repeating IV-V vamp,\n    especially if you can throw in a maj7#11 on the IV chord.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    When you get that IV-V loop, don't just mindlessly trill that #4. It's the tempting thing to do\n    as it's the killer note of the scale, but what really gives you the benefit is to run up the scale\n    from the root. Hit the root... then the perfect second... then the major third... nice, ok, lovely major scale...\n    NOW - BAM! - hit that #4. It's that illusion of playing a basic major scale but then knowing when to\n    leverage the dreamlike qualities of that #4 that will make you sound like a Lydian god.\n    Just remember that it's not always a simple mode to use as that #4 can easily sound jarring.\n  </p>\n)\n\nconst hearIt = () => (\n  <ul>\n    <li>Flying In A Blue Dream - Joe Satriani</li>\n    <li>The Simpsons Theme Song</li>\n  </ul>\n)\n\nconst title = () => <div className='subtitle'>Lydian</div>\n\nexport default Lydian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { mixolydianChords } from '../constants/chords'\n\nconst Mixolydian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName='Mixolydian'\n      chords={mixolydianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Mixolydian mode is the fifth degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the fifth note of the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-S-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The major scale on cocaine. Just take the major scale and flatten the seventh and you've\n    got a totally different beast. It's screaming blues, it's classic rock, hard rock, it's the\n    scale I use more than any other.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    You can wang a Mixolydian phrase in anywhere there's a dominant chord (a 7, 9 or 13 chord).\n    This means you can play it over any progression with a V chord. It works well over a V-IV-I.\n    It's probably most commonly associated with the twelve bar blues, where every chord is a dominant.\n    Just remember that with the changing of the chords in your 12 bar progression, the key changes.\n    This is because as a general rule, a dominant chord is always the V and can be used to determine the key.\n    For example, if you have a 12 bar in E, when you play that E7 the home key is A.\n    When you then hit an A7, you're really saying A is the V chord and the home key is D.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    You can't go wrong with this one - slide up from the minor 7 to the octave, bend a minor third up to the major third,\n    throw in double stops, whammy dips and bends all over the shop, just go wild and have a really great time.\n  </p>\n)\n\nconst hearIt = () => (\n  <ul>\n    <li>I'm Tore Down - Eric Clapton</li>\n  </ul>\n)\n\nconst title = () => <div className='subtitle'>Mixolydian</div>\n\nexport default Mixolydian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { aeolianChords } from '../constants/chords'\n\nconst Aeolian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Aeolian'}\n      chords={aeolianChords}\n      article={'an'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Aeolian mode is the sixth degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the sixth note of the major scale.</li>\n    <li>Its intervals are T-S-T-T-S-T-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Aeolian mode is another way of saying 'minor' - its scale is just the natural minor scale.\n    It's a very familiar sound but don't confuse 'minor' with 'sad', as this is a very versatile mode.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    You'll have hours of joy using this mode over any progression descending from the vi.\n    Try a vi-V-IV-V loop.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    This is just the minor pentatonic you know and love so well with a perfect second and minor sixth added.\n    You've got this - just don't neglect all of those evocative minor notes.\n  </p>\n)\n\nconst hearIt = () => (\n  <ul>\n    <li>Babe I'm Gonna Leave You - Led Zeppelin</li>\n    <li>All Along The Watchtower - Bob Dylan</li>\n  </ul>\n)\n\nconst title = () => <div className='subtitle'>Aeolian</div>\n\nexport default Aeolian\n","import React from 'react'\nimport Panel from '../components/Panel'\nimport ModeOverview from '../components/ModeOverview'\nimport { locrianChords } from '../constants/chords'\n\nconst Locrian = props => <Panel content={() => content()} title={() => title()}></Panel>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Locrian'}\n      chords={locrianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Locrian mode is the seventh degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the seventh note of the major scale.</li>\n    <li>Its intervals are S-T-T-S-T-T-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    Scary. Unpleasant. Tense. Threatening. There are minor and imperfect intervals all over the shop in this mode.\n    There's a minor second, a minor third, a minor fifth, a minor sixth and a minor seventh.\n    That's a lot of minor intervals. It's never going to sound 'nice'.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    This is really tough. It's apparently used a lot in metal but not being much of a metalhead,\n    I can't really give you any examples. I could give you examples of songs with possible Locrian riffs,\n    but nothing to really back up the fact that they're real Locrian progressions. The problem with this one\n    is that the home chord of the mode is the m7♭5 chord that's both a semitone away from the root of the key\n    and also one bass note away from being the dominant V chord of the key. It's bloody hard to write anything\n    that's truly Locrian - I did give it a shot in a rip off of the Jaws theme and that was enough for me.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    I mean... if you want. You can sort of use it similarly to the Phrygian scale.\n    Just remember not to resolve it. If your solo isn't making you feel anxious, you aren't doing it right.\n  </p>\n)\n\nconst hearIt = () => (\n  <ul>\n    <li>The 'Shark Theme' from Jaws evokes the Locrian mode (though as a two note theme it can't really be classified as modal at all)</li>\n  </ul>\n)\n\nconst title = () => <div className='subtitle'>Locrian</div>\n\nexport default Locrian\n","import React, { useState } from 'react'\nimport './App.css'\nimport Intro from './panels/Intro'\nimport Modes101 from './panels/Modes101'\nimport Modes102 from './panels/Modes102'\nimport Info from './panels/Info'\nimport Ionian from './panels/Ionian'\nimport Dorian from './panels/Dorian'\nimport Phrygian from './panels/Phrygian'\nimport Lydian from './panels/Lydian'\nimport Mixolydian from './panels/Mixolydian'\nimport Aeolian from './panels/Aeolian'\nimport Locrian from './panels/Locrian'\n// import BackingMixoLydian from './panels/backing/Mixolydian'\n\nconst App = () => {\n  const keys = ['C', 'G', 'D', 'A', 'E', 'B', 'F#']\n  const intervals = ['Tone', 'Tone', 'Semitone', 'Tone', 'Tone', 'Tone', 'Semitone']\n  const [key, setKey] = useState('C')\n\n  const handleKeyChange = e => setKey(e.target.value)\n\n  const selectKeyDropdown = () => (\n    <div>\n      <select\n        className='select dropdown'\n        onChange={handleKeyChange}\n        defaultValue={keys[0]}\n      >\n        {keys.map((selectedKey, i) => (\n          <option\n            value={selectedKey}\n            key={i}\n          >\n            {selectedKey}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='main-header'><span role='img' aria-label='guitar emoji'>🎸</span> Musical Modes for guitarists <span role='img' aria-label='guitar emoji'>🎸</span></h1>\n        <Intro />\n        <Modes101 />\n        <Modes102 />\n        <hr className='hr' />\n        <h2 className='modes-header'>Modes of the major scale</h2>\n        <Info />\n        {selectKeyDropdown()}\n        <Ionian />\n        <Dorian />\n        <Phrygian />\n        <Lydian />\n        <Mixolydian />\n        <Aeolian />\n        <Locrian />\n        <hr className='hr' />\n        {/* <h2 className='backing-tracks-header'>Backing Tracks and Examples</h2>\n        <BackingMixoLydian />\n        <hr className='hr' /> */}\n        <a\n          className=\"App-link\"\n          href=\"https://soundcloud.com/nick-holvast\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Shameless plug to my music\n        </a>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}