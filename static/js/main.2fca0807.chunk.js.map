{"version":3,"sources":["components/Page.js","pages/Intro.js","pages/About.js","pages/Info.js","components/ModeOverview.js","constants/chords.js","pages/Ionian.js","pages/Dorian.js","pages/Phrygian.js","pages/Lydian.js","pages/Mixolydian.js","pages/Aeolian.js","pages/Locrian.js","App.js","serviceWorker.js","index.js"],"names":["Page","props","useState","showContent","setShowContent","sectionStyle","border","className","onClick","style","role","aria-label","color","content","title","href","target","rel","Intro","About","Info","renderTableRow","row","i","key","note","chords","modeName","map","whatIsIt","soundsLike","article","spotIt","soloOverIt","hearIt","ionianArray","dorianArray","slice","concat","phrygianArray","lydianArray","mixolydianArray","aeolianArray","locrianArray","ionianChords","dorianChords","phrygianChords","lydianChords","mixolydianChords","aeolianChords","locrianChords","ModeOverview","Ionian","Dorian","Phrygian","Lydian","Mixolydian","Aeolian","Locrian","App","keys","setKey","handleKeyChange","e","value","onChange","defaultValue","selectedKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2fca0807.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Page = props => {\n  const [showContent, setShowContent] = useState(false)\n  const collapseSymbol = '-'\n  const expandSymbol = '+'\n  const borderColor = showContent ? '#c0ff33' : '#b000b5'\n  const sectionStyle = {\n    border: `1px solid ${borderColor}`,\n  }\n  const symbolStyle = {\n    color: '#bada55',\n    'fontWeight': '800'\n  }\n  return (\n    <div\n      className='section' onClick={() => setShowContent(!showContent)}\n      style={sectionStyle}\n      >\n      <span\n        className='expand-collapse'\n        role='img'\n        aria-label='expand or collapse'\n        style={symbolStyle}\n      >\n        {showContent ? collapseSymbol : expandSymbol}\n      </span>\n      <div>\n        {showContent\n          ? props.content()\n          : props.title()\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport Page from '../components/Page'\n\nconst Intro = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <p>\n    Modes can be a confusing aspect of music theory, particularly when approaching them as a guitarist who has been used to simply learning scales. Ok, one scale, the trusty minor pentatonic. Maybe the blues scale. Natural minor if you want to get fancy.\n    Then one day you hear somebody talking about 'modes'. <i>Modes</i> you think. Sounds interesting. So you search <a\n          className=\"App-link\"\n          href=\"https://ecosia.org/search?q=modes\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          ecosia\n        </a> and three days later you're crying and aren't even sure what a guitar is any more.\n    Why? Because there's just so much information, claims and counter claims, fake news and scholarly arguments about what modes are and what they aren't. So I thought what the hell, one more explanation can't hurt, and here you are.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>What is this page?</div>\n\nexport default Intro\n","import React from 'react'\nimport Page from '../components/Page'\n\nconst About = () => <Page content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div className='modes-101'>\n    <p>\n      So what are modes? Well, Wikipedia defines a mode as <i className='quote'>a type of musical scale coupled with a set of characteristic melodic behaviors.</i>\n      That sounds easy enough, but it's the <i>second</i> part of that definition that often gets overlooked. I'll explain why this is important, but first, we'll look at the modes as scales.\n      A scale is just a series of notes defined by the interval (either a tone or a semitone) between each step.\n      The modes of the major scale are simply, when taken in isolation, the seven notes of the major scale starting from each degree (i.e. note) of the scale.\n      If we start with a C major scale, this means that every mode will have the same notes (C, D, E, F, G, A, B), but the interval breakdown of the scale will be different.\n      So the first degree mode of C will be C-D-E-F-G-A-B, the second degree mode will be D-E-F-G-A-B-C and so on.\n      Notice that the notes are the same, but the spacing of the intervals between them is different.\n      This is because the intervals between C-D-E-F-G-A-B are tone-tone-semitone-tone-tone-tone-semitone, but between D-E-F-G-A-B-C the intervals are tone-semitone-tone-tone-tone-semitone-tone.\n    </p>\n    <p>\n      Hopefully you can see now how the notes of the modes of a given key don't change.\n      If a progression is in the key of C, there are seven modal scales available to you, all featuring the same seven notes.\n    </p>\n    <p>\n      This is a very easy place to get confused!\n      You'd be forgiven for wondering how playing all the same notes but starting from a different point is any different to playing 'non-modally'.\n      But that's kind of the point - it's not. Knowing the modal scales is just the starting point for playing modally.\n      What's more important is knowing which notes in the scale provide the 'colour', and knowing when to use them.\n      So pick a key below and let's have a look at the different modes in all their glory and how we can use them.\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Modes 101</div>\n\nexport default About\n","import React from 'react'\nimport Page from '../components/Page'\n\nconst Info = () => <Page content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div>\n    <p>\n      Ok, let's dive into the modes of the major scale, one by one.\n      You're going to pick a key (for simplicity I've just got the sharp keys for now), then by clicking or tapping on any of the panels below, you'll get a list of the notes in the scale and the chords you can build from each note.\n      Hopefully it'll come as no surprised to you that, once you've picked a key, the notes of all the modes will be the same, just from a different starting point.\n      The chords most associated with the mode will be highlighted.\n    </p>\n    <p>\n      Note that I've used the American notation style of a capital 'M' denoting major, so for example major 7 is written M7.\n      For full disclosure, this is my own interpretation of my understanding of modal music.\n      All examples, ramblings and mistakes are my own - read at your own peril.\n    </p>\n    <p>\n      So, pick a key, any key. No, not that one, an easy one please:\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Introduction</div>\n\nexport default Info\n","import React from 'react'\n\nconst renderTable = chords => (\n  <table className='mode-table'>\n    <tbody>\n      <tr className='tr-header'>\n        <td>Scale</td>\n        <td>Chords</td>\n      </tr>\n      {chords.map((row, i) => renderTableRow(row, i))}\n    </tbody>\n  </table>\n)\n\nconst renderTableRow = (row, i) => (\n  <tr key={`tr-${i}`} className='tr-data'>\n    <td key={row.note}>{row.note}</td>\n    <td key={`${row.note}-${i}`}>{row.chords}</td>\n  </tr>\n)\n\nexport default props => (\n  <div className={`mode-overview mode-overview-${props.modeName}`}>\n    <h3>The {props.modeName} Mode</h3>\n    {renderTable(props.chords)}\n    <div className='mode-detail'>\n      <h3 className='mode-detail-subheader'>\n        What is it?\n      </h3>\n      {props.whatIsIt()}\n      <h3 className='mode-detail-subheader'>\n        What does it sound like?\n      </h3>\n      {props.soundsLike()}\n      <h3 className='mode-detail-subheader'>\n        How do I spot/write {props.article} {props.modeName} progression?\n      </h3>\n      {props.spotIt()}\n      <h3 className='mode-detail-subheader'>\n        How do I solo over it?\n      </h3>\n      {props.soloOverIt()}\n      <h3 className='mode-detail-subheader'>\n        Where can I hear it?\n      </h3>\n      {props.hearIt()}\n    </div>\n  </div>\n)\n","const majorChords = 'maj, M7, M9, 6'\nconst minorChords = 'm, m7, m9'\nconst dominantChords = 'maj, 7, 9, 13'\nconst fourthChords = 'maj, maj9, maj7#11'\nconst halfDimChords = 'm7♭5'\nconst ionianArray = [{note:'C',chords:majorChords},{note:'D',chords:minorChords},{note:'E',chords:minorChords},{note:'F',chords:fourthChords},{note:'G',chords:dominantChords},{note:'A',chords:minorChords},{note:'B',chords:halfDimChords}]\nconst dorianArray = ionianArray.slice(1,7,0).concat(ionianArray[0])\nconst phrygianArray = dorianArray.slice(1,7,0).concat(dorianArray[0])\nconst lydianArray = phrygianArray.slice(1,7,0).concat(phrygianArray[0])\nconst mixolydianArray = lydianArray.slice(1,7,0).concat(lydianArray[0])\nconst aeolianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nconst locrianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nexport const ionianChords = ionianArray\nexport const dorianChords = dorianArray\nexport const phrygianChords = phrygianArray\nexport const lydianChords = lydianArray\nexport const mixolydianChords = mixolydianArray\nexport const aeolianChords = aeolianArray\nexport const locrianChords = locrianArray\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { ionianChords } from '../constants/chords'\n\nconst Ionian = props => <Page content={() => content(props)} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Ionian'}\n      chords={ionianChords}\n      article={'an'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Ionian mode is the first degree mode of the major scale. In other words, its scale is the major scale starting from the first note of the major scale.</li>\n    <li>In (other) other words, its scale is just the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Ionian mode is happy, as you'd expect from a mode with all perfect and major intervals.\n    Don't expect too much drama from this mode - lots of nice, soft major sevenths on both the I and the IV are the order of the day.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    Keep it simple, stupid. I-IV-V-I will work nicely with a major 7 chord on the I.\n    To really pin down the Ionian flavour, use a second inversion on the IV chord (this uses the I note of the scale in the root of your IV chord) and a sus4 on your V chord (which again uses that I note).\n    If you want to get really wild, make the V dominant, but don't come crying to me if you just end up smashing wild Mixolydian phrases over it.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Softly softly catchy monkey. If you're playing over an Ionian progression, you're probably not going to be smashing out whammy bar dives with the gain up to 11.\n    But hey, don't let me stop you. To really get the feel of the Ionian mode though, you want to really play on the half-step between the major 7 and the I (or octave).\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    You'll hear Ionian music in lots of places - think nursery rhymes, Christmas carols, sentimental music, live lounge acoustic music.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Ionian</div>\n\nexport default Ionian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { dorianChords } from '../constants/chords'\n\nconst Dorian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Dorian'}\n      chords={dorianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Dorian mode is the second degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the second note of the major scale.</li>\n    <li>Its intervals are T-S-T-T-T-S-T.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Dorian mode to me has a Latin vibe with a little bit of jazz.\n    Latin probably because I associate this mode heavily with Carlos Santana, and jazz because it's the ii-V-I mode,\n    and every jazz piece is legally obliged to have at least 17 ii-V-I turnarounds.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    This is the ii-V-I mode. When you see ii-V-I, hit that Dorian button. Hard.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    The major 6 in this scale is what separates it from a natural minor and in my opinion you can't really overplay that note.\n    I like to slide up into it from a minor 6. Don't neglect the minor 3 either as it provides a nice contrast with the major 6.\n    If you can, pay attention to the notes in the chords. I know that's easier said than done though so hopefully the above advice helps you just utilise the scale.\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    Any and all jazz standards, or if jazz isn't your bag, just listen to the riff of Oye Como Va by Santana.\n    And if Santana isn't your bag, I really don't think we can be friends any more.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Dorian</div>\n\nexport default Dorian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { phrygianChords } from '../constants/chords'\n\nconst Phrygian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Phrygian'}\n      chords={phrygianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Phrygian mode is the third degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the third note of the major scale.</li>\n    <li>Its intervals are S-T-T-T-S-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The \"Spanish Gypsy mode\" has a lot of minor flavour to it but maintains perfect IV and V intervals.\n    This gives it a pretty cool and very distinctive sound that you can spot from a mile away.\n    It screams \"Flamenco\".\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    I think the Phrygian mode is one of the trickiest to write progressions for.\n    Really you're looking for a iii-IV-V - although the iii will often be a dominant chord.\n    The key is that half-step between the iii and the IV chord, which gives you that minor second interval in your Phrygian scale.\n    When the perfect IV is followed by the perfect V, you know you're dealing with a Phrygian progression.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Again, I think this is tricky. While the Phrygian scale is beautiful, I rarely find myself with the chance to utilise it.\n    If you do come across that elusive iii-IV-V, just stretch your legs and have a nice run up and down the scale,\n    smashing a few hammer-ons between the 5th and minor 6 note and the root and minor second, those little semitones are what make the mode.\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    Flamenco - that's where my knowledge of this mode really starts and ends.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Phrygian</div>\n\nexport default Phrygian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { lydianChords } from '../constants/chords'\n\nconst Lydian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Lydian'}\n      chords={lydianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Lydian mode is the fourth degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the fourth note of the major scale.</li>\n    <li>Its intervals are T-T-T-S-T-S-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    Ah yes, the mode every guitarist wants to master. The Lydian mode is a proper dreamboat of a mode.\n    By which I mean it has a 'dreamlike' quality, an ethereal, almost otherwordly quality that induces transports of delight and-\n    oops, sorry, got carried away a bit there. Easy done with this belter of a mode.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    There are progressions to look out for that will enable you to use the Lydian mode,\n    but to really get the most out of it you're looking for the IV chord in your progression to have\n    a #11 (which is enharmonic with the #4 in the scale.) Ideally you're looking for the IV chord to be followed by a V,\n    but resist the urge to then resolve that V back to the I. You <i>want</i> that slightly uneasy,\n    unresolved feeling. The best way to get into the Lydian mode is to try it over a repeating IV-V vamp,\n    especially if you can throw in a maj7#11 on the IV chord.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    When you get that IV-V loop, don't just mindlessly trill that #4. It's the tempting thing to do\n    as it's the killer note of the scale, but what really gives you the benefit is to run up the scale\n    from the root. Hit the root... then the perfect second... then the major third... nice, ok, lovely major scale...\n    NOW - BAM! - hit that #4. It's that illusion of playing a basic major scale but then knowing when to\n    leverage the dreamlike qualities of that #4 that will make you sound like a Lydian god.\n    Just remember that it's not always a simple mode to use as that #4 can easily sound jarring.\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    The Lydian mode is extremely common in movie soundtracks.\n    It's also really popular with virtuoso guitarists like Steve Vai and Joe Satriani.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Lydian</div>\n\nexport default Lydian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { mixolydianChords } from '../constants/chords'\n\nconst Mixolydian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName='Mixolydian'\n      chords={mixolydianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Dorian mode is the second degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the second note of the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Ionian mode is happy, as you'd expect from a mode with all perfect and major intervals.\n    Don't expect too much drama from this mode - lots of nice, soft major sevenths on both the I and the IV are the order of the day.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    Keep it simple, stupid. I-IV-V-I will work nicely with a major 7 chord on the I.\n    To really pin down the Ionian flavour, use a second inversion on the IV chord (this uses the I note of the scale in the root of your IV chord) and a sus4 on your V chord (which again uses that I note).\n    If you want to get really wild, make the V dominant, but don't come crying to me if you just end up smashing wild Mixolydian phrases over it.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Softly softly catchy monkey. If you're playing over an Ionian progression, you're probably not going to be smashing out whammy bar dives with the gain up to 11.\n    But hey, don't let me stop you. To really get the feel of the Ionian mode though, you want to really play on the half-step between the major 7 and the I (or octave).\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    You'll hear Ionian music in lots of places - think nursery rhymes, Christmas carols, sentimental music, live lounge acoustic music.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Mixolydian</div>\n\nexport default Mixolydian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { aeolianChords } from '../constants/chords'\n\nconst Aeolian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Aeolian'}\n      chords={aeolianChords}\n      article={'an'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Dorian mode is the second degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the second note of the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Ionian mode is happy, as you'd expect from a mode with all perfect and major intervals.\n    Don't expect too much drama from this mode - lots of nice, soft major sevenths on both the I and the IV are the order of the day.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    Keep it simple, stupid. I-IV-V-I will work nicely with a major 7 chord on the I.\n    To really pin down the Ionian flavour, use a second inversion on the IV chord (this uses the I note of the scale in the root of your IV chord) and a sus4 on your V chord (which again uses that I note).\n    If you want to get really wild, make the V dominant, but don't come crying to me if you just end up smashing wild Mixolydian phrases over it.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Softly softly catchy monkey. If you're playing over an Ionian progression, you're probably not going to be smashing out whammy bar dives with the gain up to 11.\n    But hey, don't let me stop you. To really get the feel of the Ionian mode though, you want to really play on the half-step between the major 7 and the I (or octave).\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    You'll hear Ionian music in lots of places - think nursery rhymes, Christmas carols, sentimental music, live lounge acoustic music.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Aeolian</div>\n\nexport default Aeolian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { locrianChords } from '../constants/chords'\n\nconst Locrian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Locrian'}\n      chords={locrianChords}\n      article={'a'}\n      whatIsIt={() => whatIsIt()}\n      soundsLike={() => soundsLike()}\n      spotIt={() => spotIt()}\n      soloOverIt={() => soloOverIt()}\n      hearIt={() => hearIt()} />\n  </div>\n)\n\nconst whatIsIt = () => (\n  <ul>\n    <li>The Dorian mode is the second degree mode of the major scale.</li>\n    <li>In other words, its scale is the major scale starting from the second note of the major scale.</li>\n    <li>Its intervals are T-T-S-T-T-T-S.</li>\n  </ul>\n)\n\nconst soundsLike = () => (\n  <p>\n    The Ionian mode is happy, as you'd expect from a mode with all perfect and major intervals.\n    Don't expect too much drama from this mode - lots of nice, soft major sevenths on both the I and the IV are the order of the day.\n  </p>\n)\n\nconst spotIt = () => (\n  <p>\n    Keep it simple, stupid. I-IV-V-I will work nicely with a major 7 chord on the I.\n    To really pin down the Ionian flavour, use a second inversion on the IV chord (this uses the I note of the scale in the root of your IV chord) and a sus4 on your V chord (which again uses that I note).\n    If you want to get really wild, make the V dominant, but don't come crying to me if you just end up smashing wild Mixolydian phrases over it.\n  </p>\n)\n\nconst soloOverIt = () => (\n  <p>\n    Softly softly catchy monkey. If you're playing over an Ionian progression, you're probably not going to be smashing out whammy bar dives with the gain up to 11.\n    But hey, don't let me stop you. To really get the feel of the Ionian mode though, you want to really play on the half-step between the major 7 and the I (or octave).\n  </p>\n)\n\nconst hearIt = () => (\n  <p>\n    You'll hear Ionian music in lots of places - think nursery rhymes, Christmas carols, sentimental music, live lounge acoustic music.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>Locrian</div>\n\nexport default Locrian\n","import React, { useState } from 'react'\nimport './App.css'\nimport Intro from './pages/Intro'\nimport About from './pages/About'\nimport Info from './pages/Info'\nimport Ionian from './pages/Ionian'\nimport Dorian from './pages/Dorian'\nimport Phrygian from './pages/Phrygian'\nimport Lydian from './pages/Lydian'\nimport Mixolydian from './pages/Mixolydian'\nimport Aeolian from './pages/Aeolian'\nimport Locrian from './pages/Locrian'\n\nconst App = () => {\n  const keys = ['C', 'G', 'D', 'A', 'E', 'B', 'F#']\n  const intervals = ['Tone', 'Tone', 'Semitone', 'Tone', 'Tone', 'Tone', 'Semitone']\n  const [key, setKey] = useState('C')\n\n  const handleKeyChange = e => setKey(e.target.value)\n\n  const selectKeyDropdown = () => (\n    <div>\n      <select\n        className='select dropdown'\n        onChange={handleKeyChange}\n        defaultValue={keys[0]}\n      >\n        {keys.map((selectedKey, i) => (\n          <option\n            value={selectedKey}\n            key={i}\n          >\n            {selectedKey}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='main-header'><span role='img' aria-label='guitar emoji'>🎸</span> Musical Modes for guitarists <span role='img' aria-label='guitar emoji'>🎸</span></h1>\n        <Intro />\n        <About />\n        <hr className='hr' />\n        <h2 className='modes-header'>Modes of the major scale</h2>\n        <Info />\n        {selectKeyDropdown()}\n        <Ionian />\n        <Dorian />\n        <Phrygian />\n        <Lydian />\n        <Mixolydian />\n        <Aeolian />\n        <Locrian />\n\n        <a\n          className=\"App-link\"\n          href=\"https://soundcloud.com/nick-holvast\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Shameless plug to my music\n        </a>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}