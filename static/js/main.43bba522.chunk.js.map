{"version":3,"sources":["components/Page.js","pages/Intro.js","pages/About.js","pages/Info.js","components/ModeOverview.js","constants/chords.js","pages/Ionian.js","pages/Dorian.js","pages/Phrygian.js","pages/Lydian.js","pages/Mixolydian.js","pages/Aeolian.js","pages/Locrian.js","App.js","serviceWorker.js","index.js"],"names":["Page","props","useState","showContent","setShowContent","sectionStyle","border","className","onClick","style","role","aria-label","color","content","title","href","target","rel","Intro","About","renderTableRow","row","i","key","note","chords","modeName","map","ionianArray","dorianArray","slice","concat","phrygianArray","lydianArray","mixolydianArray","aeolianArray","locrianArray","ionianChords","dorianChords","phrygianChords","lydianChords","mixolydianChords","aeolianChords","locrianChords","ModeOverview","Ionian","Dorian","Phrygian","Lydian","Mixolydian","Aeolian","Locrian","App","keys","setKey","handleKeyChange","e","value","Info","onChange","defaultValue","selectedKey","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.43bba522.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nconst Page = props => {\n  const [showContent, setShowContent] = useState(false)\n  const collapseSymbol = '-'\n  const expandSymbol = '+'\n  const borderColor = showContent ? '#c0ff33' : '#b000b5'\n  const sectionStyle = {\n    border: `1px solid ${borderColor}`,\n  }\n  const symbolStyle = {\n    color: '#bada55',\n    'fontWeight': '800'\n  }\n  return (\n    <div\n      className='section' onClick={() => setShowContent(!showContent)}\n      style={sectionStyle}\n      >\n      <span\n        className='expand-collapse'\n        role='img'\n        aria-label='expand or collapse'\n        style={symbolStyle}\n      >\n        {showContent ? collapseSymbol : expandSymbol}\n      </span>\n      <div>\n        {showContent\n          ? props.content()\n          : props.title()\n        }\n      </div>\n    </div>\n  )\n}\n\nexport default Page\n","import React from 'react'\nimport Page from '../components/Page'\n\nconst Intro = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <p>\n    Modes can be a confusing aspect of music theory, particularly when approaching them as a guitarist who has been used to simply learning scales. Ok, one scale, the trusty minor pentatonic. Maybe the blues scale. Natural minor if you want to get fancy.\n    Then one day you hear somebody talking about 'modes'. <i>Modes</i> you think. Sounds interesting. So you search <a\n          className=\"App-link\"\n          href=\"https://ecosia.org/search?q=modes\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          ecosia\n        </a> and three days later you're crying and aren't even sure what a guitar is any more.\n    Why? Because there's just so much information, claims and counter claims, fake news and scholarly arguments about what modes are and what they aren't. So I thought what the hell, one more explanation can't hurt, and here you are.\n  </p>\n)\n\nconst title = () => <div className='subtitle'>What is this page?</div>\n\nexport default Intro\n","import React from 'react'\nimport Page from '../components/Page'\n\nconst About = () => <Page content={() => content()} title={() => title()} />\n\nconst content = () => (\n  <div className='modes-101'>\n    <p>\n      So what are modes? Well, Wikipedia defines a mode as <i className='quote'>a type of musical scale coupled with a set of characteristic melodic behaviors.</i>\n      That sounds easy enough, but it's the <i>second</i> part of that definition that often gets overlooked. I'll explain why this is important, but first, we'll look at the modes as scales.\n      A scale is just a series of notes defined by the interval (either a tone or a semitone) between each step.\n      The modes of the major scale are simply, when taken in isolation, the seven notes of the major scale starting from each degree (i.e. note) of the scale.\n      If we start with a C major scale, this means that every mode will have the same notes (C, D, E, F, G, A, B), but the interval breakdown of the scale will be different.\n      So the first degree mode of C will be C-D-E-F-G-A-B, the second degree mode will be D-E-F-G-A-B-C and so on.\n      Notice that the notes are the same, but the spacing of the intervals between them is different.\n      This is because the intervals between C-D-E-F-G-A-B are tone-tone-semitone-tone-tone-tone-semitone, but between D-E-F-G-A-B-C the intervals are tone-semitone-tone-tone-tone-semitone-tone.\n    </p>\n    <p>\n      Hopefully you can see now how the notes of the modes of a given key don't change.\n      If a progression is in the key of C, there are seven modal scales available to you, all featuring the same seven notes.\n    </p>\n    <p>\n      This is a very easy place to get confused!\n      You'd be forgiven for wondering how playing all the same notes but starting from a different point is any different to playing 'non-modally'.\n      But that's kind of the point - it's not. Knowing the modal scales is just the starting point for playing modally.\n      What's more important is knowing which notes in the scale provide the 'colour', and knowing when to use them.\n      So pick a key below and let's have a look at the different modes in all their glory and how we can use them.\n    </p>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Modes 101</div>\n\nexport default About\n","import React from 'react'\n\nexport default () => (\n  <p>\n    Ok, let's dive into the modes of the major scale, one by one.\n    You're going to pick a key (for simplicity I've just got the sharp keys for now), then by clicking or tapping on any of the panels below, you'll get a list of the notes in the scale and the chords you can build from each note.\n    Hopefully it'll come as no surprised to you that, once you've picked a key, the notes of all the modes will be the same, just from a different starting point.\n\n    Note that I've used the American notation style of a capital 'M' denoting major, so for example major 7 is written M7.\n\n    So, pick a key, any key. No, not that one, an easy one please:\n  </p>\n)\n","import React from 'react'\n\nconst renderTable = chords => (\n  <table className='mode-table'>\n    <tbody>\n      {chords.map((row, i) => renderTableRow(row, i))}\n    </tbody>\n  </table>\n)\n\nconst renderTableRow = (row, i) => (\n  <tr key={`tr-${i}`}>\n    <td key={row.note}>{row.note}</td>\n    <td key={`${row.note}-${i}`}>{row.chords}</td>\n  </tr>\n)\n\nexport default props => (\n  <div className={`mode-overview mode-overview-${props.modeName}`}>\n    <h3>The {props.modeName} Mode</h3>\n    {renderTable(props.chords)}\n  </div>\n)\n","const majorChords = 'maj, M7, M9, 6'\nconst minorChords = 'm, m7, m9'\nconst dominantChords = 'maj, 7, 9, 13'\nconst fourthChords = 'maj, maj9, maj7#11'\nconst halfDimChords = 'm7♭5'\nconst ionianArray = [{note:'C',chords:majorChords},{note:'D',chords:minorChords},{note:'E',chords:minorChords},{note:'F',chords:fourthChords},{note:'G',chords:dominantChords},{note:'A',chords:minorChords},{note:'B',chords:halfDimChords}]\nconst dorianArray = ionianArray.slice(1,7,0).concat(ionianArray[0])\nconst phrygianArray = dorianArray.slice(1,7,0).concat(dorianArray[0])\nconst lydianArray = phrygianArray.slice(1,7,0).concat(phrygianArray[0])\nconst mixolydianArray = lydianArray.slice(1,7,0).concat(lydianArray[0])\nconst aeolianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nconst locrianArray = mixolydianArray.slice(1,7,0).concat(mixolydianArray[0])\nexport const ionianChords = ionianArray\nexport const dorianChords = dorianArray\nexport const phrygianChords = phrygianArray\nexport const lydianChords = lydianArray\nexport const mixolydianChords = mixolydianArray\nexport const aeolianChords = aeolianArray\nexport const locrianChords = locrianArray\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { ionianChords } from '../constants/chords'\n\nconst Ionian = props => <Page content={() => content(props)} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Ionian'}\n      chords={ionianChords} />\n    <div>The Ionian</div>\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Ionian</div>\n\nexport default Ionian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { dorianChords } from '../constants/chords'\n\nconst Dorian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Dorian'}\n      chords={dorianChords} />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Dorian</div>\n\nexport default Dorian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { phrygianChords } from '../constants/chords'\n\nconst Phrygian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Phrygian'}\n      chords={phrygianChords}\n    />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Phrygian</div>\n\nexport default Phrygian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { lydianChords } from '../constants/chords'\n\nconst Lydian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Lydian'}\n      chords={lydianChords}\n    />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Lydian</div>\n\nexport default Lydian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { mixolydianChords } from '../constants/chords'\n\nconst Mixolydian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName='Mixolydian'\n      chords={mixolydianChords}\n    />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Mixolydian</div>\n\nexport default Mixolydian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { aeolianChords } from '../constants/chords'\n\nconst Aeolian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Aeolian'}\n      chords={aeolianChords}\n    />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Aeolian</div>\n\nexport default Aeolian\n","import React from 'react'\nimport Page from '../components/Page'\nimport ModeOverview from '../components/ModeOverview'\nimport { locrianChords } from '../constants/chords'\n\nconst Locrian = props => <Page content={() => content()} title={() => title()}></Page>\n\nconst content = () => (\n  <div className='mode-section'>\n    <ModeOverview\n      modeName={'Locrian'}\n      chords={locrianChords}\n    />\n  </div>\n)\n\nconst title = () => <div className='subtitle'>Locrian</div>\n\nexport default Locrian\n","import React, { useState } from 'react'\nimport './App.css'\nimport Intro from './pages/Intro'\nimport About from './pages/About'\nimport Info from './pages/Info'\nimport Ionian from './pages/Ionian'\nimport Dorian from './pages/Dorian'\nimport Phrygian from './pages/Phrygian'\nimport Lydian from './pages/Lydian'\nimport Mixolydian from './pages/Mixolydian'\nimport Aeolian from './pages/Aeolian'\nimport Locrian from './pages/Locrian'\n\nconst App = () => {\n  const keys = ['C', 'G', 'D', 'A', 'E', 'B', 'F#']\n  const intervals = ['Tone', 'Tone', 'Semitone', 'Tone', 'Tone', 'Tone', 'Semitone']\n  const [key, setKey] = useState('C')\n\n  const handleKeyChange = e => setKey(e.target.value)\n\n  const selectKeyDropdown = () => (\n    <div className='dropdown'>\n      <Info />\n      <select\n        className='select'\n        onChange={handleKeyChange}\n        defaultValue={keys[0]}\n      >\n        {keys.map((selectedKey, i) => (\n          <option\n            value={selectedKey}\n            key={i}\n          >\n            {selectedKey}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className='main-header'><span role='img' aria-label='guitar emoji'>🎸</span> Musical Modes for guitarists <span role='img' aria-label='guitar emoji'>🎸</span></h1>\n        <Intro />\n        <About />\n        <hr className='hr' />\n        <h2 className='modes-header'>Modes of the major scale</h2>\n        {selectKeyDropdown()}\n        <Ionian />\n        <Dorian />\n        <Phrygian />\n        <Lydian />\n        <Mixolydian />\n        <Aeolian />\n        <Locrian />\n\n        <a\n          className=\"App-link\"\n          href=\"https://soundcloud.com/nick-holvast\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Shameless plug to my music\n        </a>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}